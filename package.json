{
  "name": "code-function-analysis",
  "displayName": "Code Function Analysis",
  "description": "Code Function Analysis is a Visual Studio Code extension that provides intelligent, context-aware analysis of your selected code functions. Leveraging advanced AI through OpenAI's GPT-4 API or Hugging Face's free models, this tool offers comprehensive feedback on various aspects of your code, including performance, naming conventions, code quality, time and space complexity, and opportunities for improvement.",
  "version": "1.6.0",
  "icon": "assets/icon.png",
  "engines": {
    "vscode": "^1.94.0"
  },
  "categories": [
    "Other"
  ],
  "main": "./dist/extension.js",
  "activationEvents": [
    "onLanguage:python",
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:java",
    "onLanguage:cpp",
    "onCommand:code-function-analysis.analyzeFunction",
    "onCommand:code-function-analysis.generateUnitTest"
  ],
  "contributes": {
    "commands": [
      {
        "command": "code-function-analysis.analyzeFunction",
        "title": "Analyze Selected Function"
      },
      {
        "command": "code-function-analysis.generateUnitTest",
        "title": "Generate Unit Test for Selected Function",
        "category": "Code Function Analysis"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "code-function-analysis.analyzeFunction",
          "when": "editorHasSelection",
          "group": "navigation"
        },
        {
          "command": "code-function-analysis.generateUnitTest",
          "when": "editorHasSelection",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Code Function Analysis",
      "properties": {
        "code-function-analysis.apiProvider": {
          "type": "string",
          "enum": [
            "OpenAI",
            "HuggingFace",
            "GoogleGemini"
          ],
          "default": "GoogleGemini",
          "description": "Select the AI service provider."
        },
        "code-function-analysis.openAIApiKey": {
          "type": "string",
          "default": "",
          "description": "Your OpenAI API key."
        },
        "code-function-analysis.huggingFaceApiKey": {
          "type": "string",
          "default": "",
          "description": "Your Hugging Face API token."
        },
        "code-function-analysis.googleGeminiApiKey": {
          "type": "string",
          "default": "",
          "description": "Your Gemini API key."
        },
        "code-function-analysis.huggingFaceModel": {
          "type": "string",
          "enum": [
            "EleutherAI/gpt-neo-2.7B",
            "facebook/opt-1.3b",
            "bigscience/bloom-1b1",
            "google/flan-t5-large",
            "nvidia/NVLM-D-72B",
            "custom"
          ],
          "default": "EleutherAI/gpt-neo-2.7B",
          "description": "Select the Hugging Face model to use."
        },
        "code-function-analysis.huggingFaceCustomModel": {
          "type": "string",
          "default": "",
          "description": "Enter a custom Hugging Face model name to use when 'custom' is selected above."
        },
        "code-function-analysis.googleGeminiModel": {
          "type": "string",
          "enum": [
            "gemini-1.5-flash",
            "gemini-1.5-flash-8b",
            "gemini-1.5-pro",
            "gemini-1.0-pro"
          ],
          "default": "gemini-1.5-flash",
          "description": "Select the Gemini model to use."
        },
        "code-function-analysis.feedbackLevel": {
          "type": "string",
          "enum": [
            "simple",
            "verbose"
          ],
          "default": "simple",
          "description": "Set the level of detail in feedback. 'verbose' provides detailed pros and cons; 'simple' offers concise feedback."
        },
        "code-function-analysis.focusAreas": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "performance",
              "style",
              "readability",
              "complexity"
            ]
          },
          "default": [
            "performance",
            "style",
            "readability",
            "complexity"
          ],
          "description": "Select the focus areas for feedback."
        },
        "code-function-analysis.autoAnalyzeOnSelection": {
          "type": "boolean",
          "default": false,
          "description": "Automatically analyze code when it is selected."
        },
        "code-function-analysis.expandSelectionToFunction": {
          "type": "boolean",
          "default": true,
          "description": "Toggle whether to expand selection to the full function when a single line is selected."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.8",
    "@types/node": "20.x",
    "@types/vscode": "^1.94.0",
    "@typescript-eslint/eslint-plugin": "^8.7.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": "^0.24.0",
    "eslint": "^9.11.1",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.6.2"
  },
  "dependencies": {
    "@google/generative-ai": "^0.21.0",
    "axios": "^1.4.0",
    "marked": "^14.1.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Neroli1108/code-function-analysis-vscode-ext.git"
  },
  "publisher": "Nero375"
}
